module 0x251011524cd0f76881f16e7c2d822f0c1c9510bfd2430ba24e1b3d52796df204::Deploy{
    use 0x1::signer::{Self};
    use 0x1::vector::{Self};
    use 0x1::code::{publish_package_txn};
    use 0x1::string::{Self, String, utf8};
    use 0x1::bcs::{Self};
    use 0x1::hash::{Self};
    //use 0x1::util::address;

    fun mysplit(b: u8): (u8, u8){
        let l = b >> 4;
        let r = b & 0xf;
        (l, r)
    }

    public fun to_hex(b: vector<u8>): vector<u8>{
        let ascii = b"0123456789abcdef";
        let res = vector::empty<u8>();
        let n = vector::length(&b);
        let i = 0;
        while (i < n){
            let cur = *vector::borrow<u8>(&b, i);
            let (l, r) = mysplit(cur);
            vector::push_back(&mut res, *vector::borrow<u8>(&ascii, (l as u64)));
            vector::push_back(&mut res, *vector::borrow<u8>(&ascii, (r as u64)));
            i = i+1;
        };
        res
    }

    public entry fun deployCoin(wormhole: &signer){
        //TODO: we need to make a modification in metadata_serialized involving modifying the digest and then SHA3-ing it
        let addr = signer::address_of(wormhole);
        let bytes = bcs::to_bytes(&addr);
        let string: String = utf8(b"module ");
        string::append(&mut string, utf8(to_hex(bytes)));
        string::append(&mut string, utf8(b"::coin { struct T has key {} }"));
        let new_source_digest = hash::sha3_256(hash::sha3_256(*string::bytes(&string)));

        let metadata_serialized = vector[0x0b, 0x57, 0x72, 0x61, 0x70, 0x70, 0x65, 0x64, 0x43, 0x6f, 0x69, 0x6e, 0x01, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x40, 0x42, 0x41, 0x33, 0x35, 0x32, 0x44, 0x38, 0x41, 0x42, 0x43, 0x45, 0x33, 0x42, 0x44, 0x37, 0x37, 0x39, 0x46, 0x39, 0x45, 0x33, 0x41, 0x44, 0x35, 0x33, 0x46, 0x42, 0x32, 0x41, 0x36, 0x42, 0x35, 0x39, 0x42, 0x36, 0x30, 0x30, 0x38, 0x44, 0x37, 0x33, 0x30, 0x35, 0x38, 0x45, 0x35, 0x33, 0x35, 0x39, 0x46, 0x38, 0x30, 0x32, 0x33, 0x44, 0x37, 0x39, 0x36, 0x46, 0x32, 0x31, 0x38, 0x38, 0x34, 0x8e, 0x03, 0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xb5, 0x53, 0x4b, 0x6b, 0x1b, 0x31, 0x10, 0xbe, 0xeb, 0x57, 0x0c, 0xf2, 0xa5, 0xa5, 0xb5, 0xad, 0x95, 0x9f, 0x09, 0xe4, 0x50, 0x5a, 0x7a, 0x2b, 0x39, 0x34, 0xa5, 0x07, 0x13, 0x82, 0x1e, 0xb3, 0xb6, 0xf0, 0xae, 0x24, 0x24, 0x79, 0x9b, 0x50, 0xf2, 0xdf, 0x33, 0x72, 0x6c, 0x72, 0x09, 0xe4, 0xe4, 0x9b, 0x66, 0xe6, 0x7b, 0x21, 0x66, 0x36, 0x51, 0x99, 0xbd, 0xda, 0xe2, 0x3d, 0xf3, 0xaa, 0x47, 0xb8, 0x01, 0xfe, 0x37, 0xa9, 0x18, 0xd1, 0x7e, 0x0f, 0xce, 0x73, 0x36, 0x60, 0xca, 0x2e, 0xf8, 0xda, 0x17, 0x13, 0x31, 0x69, 0x38, 0x3b, 0xc4, 0x6d, 0x52, 0x16, 0x1f, 0x62, 0xe8, 0x9c, 0x79, 0xaa, 0x03, 0x13, 0xfa, 0xa8, 0x8a, 0xd3, 0x1d, 0x72, 0xc6, 0x46, 0x77, 0xb7, 0x3f, 0x6e, 0xaf, 0x21, 0x3a, 0x0f, 0x27, 0x6e, 0x06, 0x8d, 0x6d, 0x48, 0x08, 0xbd, 0x72, 0xde, 0x63, 0x81, 0x84, 0x1d, 0xaa, 0x8c, 0x6c, 0x63, 0x31, 0xa2, 0xb7, 0xe8, 0x8d, 0xc3, 0x7c, 0xcf, 0xbe, 0xc5, 0x12, 0xf2, 0xcf, 0x44, 0x29, 0xfe, 0x85, 0xb4, 0x27, 0xe1, 0xff, 0xb0, 0x75, 0xa5, 0x1a, 0xec, 0x4a, 0x89, 0xf9, 0x7a, 0x3a, 0xa5, 0x72, 0x77, 0xd0, 0x13, 0xf2, 0x9b, 0xaa, 0x0a, 0x1e, 0x77, 0x4a, 0xe7, 0xd3, 0xd3, 0x90, 0xc3, 0x84, 0x00, 0xfc, 0x2b, 0xe4, 0x83, 0xb6, 0x2e, 0x55, 0xe2, 0xeb, 0xa8, 0x0f, 0x03, 0x4e, 0xdb, 0xb3, 0xf0, 0x09, 0xff, 0x56, 0x13, 0x23, 0xe1, 0x50, 0xe1, 0x16, 0x07, 0xca, 0xc7, 0xe1, 0x99, 0xfd, 0x22, 0xca, 0xef, 0x62, 0x3b, 0xa7, 0x2f, 0x97, 0xa3, 0x96, 0xe3, 0x7c, 0x34, 0x79, 0x37, 0xc3, 0xf1, 0x3f, 0x2e, 0x1d, 0xe2, 0xb5, 0xf9, 0x51, 0x8a, 0xbb, 0xb0, 0x47, 0x7f, 0xe9, 0x10, 0xa5, 0x9a, 0xbc, 0x9b, 0x61, 0x04, 0x7f, 0xe4, 0x62, 0xf9, 0x81, 0x7f, 0x0c, 0xbe, 0x60, 0x3f, 0x26, 0xca, 0x51, 0xf3, 0x40, 0x8c, 0x37, 0xad, 0xba, 0x7a, 0x1c, 0x48, 0x8a, 0x6d, 0x94, 0xb5, 0x09, 0x73, 0xae, 0x1b, 0x37, 0x02, 0x8b, 0xc9, 0x0d, 0x68, 0xe1, 0xd4, 0x84, 0x36, 0x85, 0x1e, 0xf2, 0x4e, 0xcd, 0x1e, 0x88, 0xfe, 0x89, 0xf6, 0xb3, 0x0b, 0x4f, 0x98, 0xe0, 0x0b, 0x70, 0x12, 0xed, 0x77, 0x81, 0x56, 0xfc, 0x33, 0x1b, 0x9d, 0xdf, 0x37, 0x5c, 0x3c, 0xca, 0x45, 0x23, 0x9a, 0x66, 0x21, 0xe7, 0xc6, 0x8a, 0x76, 0xb5, 0x5c, 0xaf, 0x9b, 0xb6, 0x59, 0xe2, 0xca, 0x48, 0xbb, 0x96, 0xb2, 0x15, 0xa6, 0x31, 0x57, 0x84, 0xd0, 0xad, 0x95, 0xf3, 0x99, 0xd0, 0x4a, 0xce, 0xb1, 0xd1, 0x33, 0xbb, 0x90, 0xab, 0xab, 0xa5, 0x6d, 0xa5, 0x98, 0x73, 0x4a, 0x71, 0xd6, 0x3b, 0x5e, 0xd9, 0xa3, 0xa0, 0x2b, 0x7a, 0x01, 0x3f, 0xf3, 0xbc, 0xf0, 0x96, 0x03, 0x00, 0x00, 0x01, 0x06, 0x44, 0x65, 0x70, 0x6c, 0x6f, 0x79, 0xcb, 0x03, 0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8d, 0x52, 0xc9, 0x6e, 0xab, 0x40, 0x10, 0xbc, 0xfb, 0x2b, 0x5a, 0x1c, 0x2c, 0x90, 0x90, 0x02, 0xc4, 0x0b, 0x19, 0xe7, 0xe5, 0xf2, 0xde, 0x1f, 0xe4, 0xdd, 0xd1, 0x2c, 0x8d, 0x8d, 0xc2, 0x26, 0x66, 0x26, 0x31, 0xb1, 0xf8, 0xf7, 0xcc, 0xb0, 0xc5, 0x46, 0x8e, 0x14, 0x6e, 0x43, 0x75, 0x75, 0x57, 0x57, 0x57, 0x51, 0x09, 0x9d, 0x23, 0x04, 0xe7, 0x68, 0x1b, 0x06, 0x61, 0xb8, 0x8d, 0x36, 0x5c, 0x04, 0xe9, 0x7e, 0x17, 0xc7, 0x61, 0x1a, 0xee, 0x70, 0xcf, 0x23, 0x11, 0x47, 0x51, 0x1a, 0xf0, 0x90, 0x3f, 0x99, 0x0a, 0x96, 0x8a, 0x68, 0xf3, 0x18, 0x30, 0x1a, 0x6d, 0x30, 0x64, 0x8f, 0x62, 0x1b, 0xed, 0x9f, 0x76, 0x22, 0x8d, 0x82, 0x0d, 0x21, 0xff, 0xb0, 0xce, 0xab, 0xf6, 0xb2, 0x02, 0xf3, 0x69, 0x69, 0x7b, 0x86, 0x84, 0xc8, 0xec, 0x58, 0x62, 0x43, 0xc8, 0xe5, 0x15, 0xf3, 0xb4, 0x3b, 0xdc, 0x82, 0xef, 0xc8, 0x55, 0xf5, 0x13, 0xc8, 0x2b, 0x81, 0x06, 0xaa, 0x35, 0xcb, 0x33, 0x79, 0x4a, 0x6a, 0xca, 0xdf, 0xe8, 0x11, 0x13, 0x75, 0x2e, 0x97, 0x95, 0x52, 0x35, 0x59, 0x79, 0x1c, 0xdb, 0xf8, 0xf0, 0xda, 0x3f, 0x7d, 0xd0, 0x2a, 0x8d, 0x97, 0xa5, 0x8c, 0xcb, 0xdb, 0x71, 0x0f, 0x0f, 0x33, 0xa6, 0x55, 0x96, 0x13, 0x42, 0x85, 0x68, 0x50, 0xca, 0xc3, 0x6a, 0x84, 0xe1, 0x03, 0x81, 0x4a, 0xa9, 0x0b, 0x04, 0x06, 0x0d, 0xd6, 0x06, 0xc4, 0x52, 0x49, 0xa0, 0xf0, 0x4e, 0xf3, 0x4c, 0xc0, 0x09, 0xcf, 0x30, 0x08, 0xe8, 0x09, 0xbd, 0x5c, 0x0e, 0xa9, 0x2e, 0x41, 0x55, 0x89, 0x01, 0x5d, 0x46, 0x60, 0xd8, 0xf3, 0x59, 0xc7, 0x2f, 0x1e, 0x19, 0xe5, 0x0d, 0x36, 0xf5, 0xda, 0x8c, 0x4c, 0x97, 0x79, 0xfd, 0xbb, 0x5b, 0x5d, 0x37, 0x31, 0x73, 0x9a, 0xb6, 0x6f, 0x25, 0x7a, 0x6b, 0xff, 0x56, 0x59, 0xe9, 0x7e, 0x54, 0x4d, 0x71, 0xaa, 0x72, 0x24, 0xb0, 0x1e, 0xbc, 0xf5, 0xbe, 0x5b, 0xe5, 0xa8, 0xc0, 0xea, 0x87, 0x3f, 0x30, 0xf9, 0x3e, 0xae, 0x93, 0x54, 0xe9, 0xcc, 0xf4, 0x0e, 0x37, 0x04, 0xd6, 0x2a, 0x94, 0x86, 0xd1, 0x5b, 0x63, 0x34, 0xf7, 0x6f, 0x77, 0x6d, 0x89, 0x8b, 0xca, 0xd1, 0xe7, 0x71, 0x03, 0x43, 0x19, 0xa4, 0x3b, 0xc5, 0x90, 0x21, 0xe7, 0xaa, 0x7c, 0x3a, 0x09, 0xad, 0x6b, 0x2c, 0x85, 0xbb, 0x2e, 0xf4, 0x44, 0xf7, 0x67, 0x5f, 0xec, 0x1c, 0xef, 0x97, 0x9c, 0x71, 0x92, 0x4d, 0x45, 0x56, 0xc2, 0xc5, 0xfe, 0xd7, 0x5c, 0xc1, 0x7f, 0x38, 0x51, 0x09, 0x6f, 0xd8, 0xc2, 0xa5, 0x83, 0xce, 0xb1, 0xdd, 0x6e, 0x14, 0x17, 0xa8, 0xa8, 0xa0, 0x8a, 0x26, 0x12, 0x9b, 0xcc, 0x9c, 0xeb, 0x13, 0x85, 0xdd, 0xd4, 0x91, 0xc2, 0x59, 0x54, 0xda, 0xb4, 0x19, 0x68, 0x4a, 0x24, 0x16, 0xb5, 0x6a, 0x9f, 0xbf, 0xef, 0xf6, 0xe2, 0x2e, 0xbc, 0xe0, 0xba, 0x49, 0xee, 0x72, 0x4c, 0xf1, 0x75, 0xed, 0x04, 0xd6, 0xda, 0x64, 0x98, 0x99, 0x0c, 0x0f, 0x7b, 0x59, 0xaa, 0x3f, 0x37, 0xb9, 0x96, 0x7d, 0x27, 0xef, 0xf3, 0xe5, 0xfc, 0x7b, 0x0b, 0xf9, 0x30, 0xb6, 0x18, 0x03, 0xd4, 0x7d, 0x01, 0xdf, 0x1b, 0x5a, 0xce, 0xd3, 0x03, 0x00, 0x00, 0x00, 0x00, 0x04, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0e, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x77, 0x6f, 0x72, 0x6b, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0b, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x53, 0x74, 0x64, 0x6c, 0x69, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x01, 0x0a, 0x4d, 0x6f, 0x76, 0x65, 0x53, 0x74, 0x64, 0x6c, 0x69, 0x62, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x03, 0x0a, 0x41, 0x70, 0x74, 0x6f, 0x73, 0x54, 0x6f, 0x6b, 0x65, 0x6e, 0x00];
        let n = vector::length(&metadata_serialized);
        // splice out old source digest from metadata and replace with new
        let metadata_new = vector::empty();
        let i = 0;
        while (i < 22){
            vector::push_back(&mut metadata_new, *vector::borrow(&metadata_serialized, i));
            i = i + 1;
        };
        while (i < 86){
            vector::push_back(&mut metadata_new, *vector::borrow(&new_source_digest, i - 22));
            i = i + 1;
        };
        while (i < n ){
            vector::push_back(&mut metadata_new, *vector::borrow(&metadata_serialized, i));
            i = i + 1;
        };

        let code = vector::empty<vector<u8>>();
        let cur_code = vector::empty<u8>();
        vector::push_back(&mut code, cur_code);

        //let z = vector[3u8, 23ewxx0x4]
        publish_package_txn(wormhole, metadata_serialized, code);
    }
}

#[test_only]
module wormhole::ascii_test {
    use 0x1::vector::{Self};
    use 0x1::string::{utf8};
    use 0x251011524cd0f76881f16e7c2d822f0c1c9510bfd2430ba24e1b3d52796df204::Deploy::to_hex;
    #[test]
    fun test_one(){
        let v = vector::empty<u8>();
        vector::push_back(&mut v, 0x12);
        vector::push_back(&mut v, 0x34);
        let b = to_hex(v);
        let s = utf8(b);
        assert!(s==utf8(b"1234"), 0)
    }
}