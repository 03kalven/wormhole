{
  "contract_name": "cw20-wrapped-2",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "asset_address",
      "asset_chain",
      "decimals",
      "name",
      "symbol"
    ],
    "properties": {
      "asset_address": {
        "$ref": "#/definitions/Binary"
      },
      "asset_chain": {
        "type": "integer",
        "format": "uint16",
        "minimum": 0.0
      },
      "decimals": {
        "type": "integer",
        "format": "uint8",
        "minimum": 0.0
      },
      "init_hook": {
        "anyOf": [
          {
            "$ref": "#/definitions/InitHook"
          },
          {
            "type": "null"
          }
        ]
      },
      "mint": {
        "anyOf": [
          {
            "$ref": "#/definitions/InitMint"
          },
          {
            "type": "null"
          }
        ]
      },
      "name": {
        "type": "string"
      },
      "symbol": {
        "type": "string"
      }
    },
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
        "type": "string"
      },
      "InitHook": {
        "type": "object",
        "required": [
          "contract_addr",
          "msg"
        ],
        "properties": {
          "contract_addr": {
            "type": "string"
          },
          "msg": {
            "$ref": "#/definitions/Binary"
          }
        }
      },
      "InitMint": {
        "type": "object",
        "required": [
          "amount",
          "recipient"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint128"
          },
          "recipient": {
            "type": "string"
          }
        }
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      }
    }
  },
  "execute": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "ExecuteMsg",
    "oneOf": [
      {
        "description": "Implements CW20. Transfer is a base message to move tokens to another account without triggering actions",
        "type": "object",
        "required": [
          "transfer"
        ],
        "properties": {
          "transfer": {
            "type": "object",
            "required": [
              "amount",
              "recipient"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "recipient": {
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Slightly different than CW20. Burn is a base message to destroy tokens forever",
        "type": "object",
        "required": [
          "burn"
        ],
        "properties": {
          "burn": {
            "type": "object",
            "required": [
              "account",
              "amount"
            ],
            "properties": {
              "account": {
                "type": "string"
              },
              "amount": {
                "$ref": "#/definitions/Uint128"
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Implements CW20. Send is a base message to transfer tokens to a contract and trigger an action on the receiving contract.",
        "type": "object",
        "required": [
          "send"
        ],
        "properties": {
          "send": {
            "type": "object",
            "required": [
              "amount",
              "contract",
              "msg"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "contract": {
                "type": "string"
              },
              "msg": {
                "$ref": "#/definitions/Binary"
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Implements CW20 \"mintable\" extension. If authorized, creates amount new tokens and adds to the recipient balance.",
        "type": "object",
        "required": [
          "mint"
        ],
        "properties": {
          "mint": {
            "type": "object",
            "required": [
              "amount",
              "recipient"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "recipient": {
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Implements CW20 \"approval\" extension. Allows spender to access an additional amount tokens from the owner's (env.sender) account. If expires is Some(), overwrites current allowance expiration with this one.",
        "type": "object",
        "required": [
          "increase_allowance"
        ],
        "properties": {
          "increase_allowance": {
            "type": "object",
            "required": [
              "amount",
              "spender"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "expires": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Expiration"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "spender": {
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Implements CW20 \"approval\" extension. Lowers the spender's access of tokens from the owner's (env.sender) account by amount. If expires is Some(), overwrites current allowance expiration with this one.",
        "type": "object",
        "required": [
          "decrease_allowance"
        ],
        "properties": {
          "decrease_allowance": {
            "type": "object",
            "required": [
              "amount",
              "spender"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "expires": {
                "anyOf": [
                  {
                    "$ref": "#/definitions/Expiration"
                  },
                  {
                    "type": "null"
                  }
                ]
              },
              "spender": {
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Implements CW20 \"approval\" extension. Transfers amount tokens from owner -> recipient if `env.sender` has sufficient pre-approval.",
        "type": "object",
        "required": [
          "transfer_from"
        ],
        "properties": {
          "transfer_from": {
            "type": "object",
            "required": [
              "amount",
              "owner",
              "recipient"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "owner": {
                "type": "string"
              },
              "recipient": {
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Implements CW20 \"approval\" extension. Sends amount tokens from owner -> contract if `env.sender` has sufficient pre-approval.",
        "type": "object",
        "required": [
          "send_from"
        ],
        "properties": {
          "send_from": {
            "type": "object",
            "required": [
              "amount",
              "contract",
              "msg",
              "owner"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "contract": {
                "type": "string"
              },
              "msg": {
                "$ref": "#/definitions/Binary"
              },
              "owner": {
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Implements CW20 \"approval\" extension. Destroys tokens forever",
        "type": "object",
        "required": [
          "burn_from"
        ],
        "properties": {
          "burn_from": {
            "type": "object",
            "required": [
              "amount",
              "owner"
            ],
            "properties": {
              "amount": {
                "$ref": "#/definitions/Uint128"
              },
              "owner": {
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Extend Interface with the ability to update token metadata.",
        "type": "object",
        "required": [
          "update_metadata"
        ],
        "properties": {
          "update_metadata": {
            "type": "object",
            "required": [
              "name",
              "symbol"
            ],
            "properties": {
              "name": {
                "type": "string"
              },
              "symbol": {
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": false
      }
    ],
    "definitions": {
      "Binary": {
        "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
        "type": "string"
      },
      "Expiration": {
        "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
        "oneOf": [
          {
            "description": "AtHeight will expire when `env.block.height` >= height",
            "type": "object",
            "required": [
              "at_height"
            ],
            "properties": {
              "at_height": {
                "type": "integer",
                "format": "uint64",
                "minimum": 0.0
              }
            },
            "additionalProperties": false
          },
          {
            "description": "AtTime will expire when `env.block.time` >= time",
            "type": "object",
            "required": [
              "at_time"
            ],
            "properties": {
              "at_time": {
                "$ref": "#/definitions/Timestamp"
              }
            },
            "additionalProperties": false
          },
          {
            "description": "Never will never expire. Used to express the empty variant",
            "type": "object",
            "required": [
              "never"
            ],
            "properties": {
              "never": {
                "type": "object"
              }
            },
            "additionalProperties": false
          }
        ]
      },
      "Timestamp": {
        "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
        "allOf": [
          {
            "$ref": "#/definitions/Uint64"
          }
        ]
      },
      "Uint128": {
        "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
        "type": "string"
      },
      "Uint64": {
        "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
        "type": "string"
      }
    }
  },
  "query": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "QueryMsg",
    "oneOf": [
      {
        "description": "Generic information about the wrapped asset",
        "type": "object",
        "required": [
          "wrapped_asset_info"
        ],
        "properties": {
          "wrapped_asset_info": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Implements CW20. Returns the current balance of the given address, 0 if unset.",
        "type": "object",
        "required": [
          "balance"
        ],
        "properties": {
          "balance": {
            "type": "object",
            "required": [
              "address"
            ],
            "properties": {
              "address": {
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Implements CW20. Returns metadata on the contract - name, decimals, supply, etc.",
        "type": "object",
        "required": [
          "token_info"
        ],
        "properties": {
          "token_info": {
            "type": "object"
          }
        },
        "additionalProperties": false
      },
      {
        "description": "Implements CW20 \"allowance\" extension. Returns how much spender can use from owner account, 0 if unset.",
        "type": "object",
        "required": [
          "allowance"
        ],
        "properties": {
          "allowance": {
            "type": "object",
            "required": [
              "owner",
              "spender"
            ],
            "properties": {
              "owner": {
                "type": "string"
              },
              "spender": {
                "type": "string"
              }
            }
          }
        },
        "additionalProperties": false
      }
    ]
  },
  "migrate": null,
  "sudo": null,
  "responses": {
    "allowance": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "AllowanceResponse",
      "type": "object",
      "required": [
        "allowance",
        "expires"
      ],
      "properties": {
        "allowance": {
          "$ref": "#/definitions/Uint128"
        },
        "expires": {
          "$ref": "#/definitions/Expiration"
        }
      },
      "definitions": {
        "Expiration": {
          "description": "Expiration represents a point in time when some event happens. It can compare with a BlockInfo and will return is_expired() == true once the condition is hit (and for every block in the future)",
          "oneOf": [
            {
              "description": "AtHeight will expire when `env.block.height` >= height",
              "type": "object",
              "required": [
                "at_height"
              ],
              "properties": {
                "at_height": {
                  "type": "integer",
                  "format": "uint64",
                  "minimum": 0.0
                }
              },
              "additionalProperties": false
            },
            {
              "description": "AtTime will expire when `env.block.time` >= time",
              "type": "object",
              "required": [
                "at_time"
              ],
              "properties": {
                "at_time": {
                  "$ref": "#/definitions/Timestamp"
                }
              },
              "additionalProperties": false
            },
            {
              "description": "Never will never expire. Used to express the empty variant",
              "type": "object",
              "required": [
                "never"
              ],
              "properties": {
                "never": {
                  "type": "object"
                }
              },
              "additionalProperties": false
            }
          ]
        },
        "Timestamp": {
          "description": "A point in time in nanosecond precision.\n\nThis type can represent times from 1970-01-01T00:00:00Z to 2554-07-21T23:34:33Z.\n\n## Examples\n\n``` # use cosmwasm_std::Timestamp; let ts = Timestamp::from_nanos(1_000_000_202); assert_eq!(ts.nanos(), 1_000_000_202); assert_eq!(ts.seconds(), 1); assert_eq!(ts.subsec_nanos(), 202);\n\nlet ts = ts.plus_seconds(2); assert_eq!(ts.nanos(), 3_000_000_202); assert_eq!(ts.seconds(), 3); assert_eq!(ts.subsec_nanos(), 202); ```",
          "allOf": [
            {
              "$ref": "#/definitions/Uint64"
            }
          ]
        },
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        },
        "Uint64": {
          "description": "A thin wrapper around u64 that is using strings for JSON encoding/decoding, such that the full u64 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u64` to get the value out:\n\n``` # use cosmwasm_std::Uint64; let a = Uint64::from(42u64); assert_eq!(a.u64(), 42);\n\nlet b = Uint64::from(70u32); assert_eq!(b.u64(), 70); ```",
          "type": "string"
        }
      }
    },
    "balance": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "BalanceResponse",
      "type": "object",
      "required": [
        "balance"
      ],
      "properties": {
        "balance": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "token_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "TokenInfoResponse",
      "type": "object",
      "required": [
        "decimals",
        "name",
        "symbol",
        "total_supply"
      ],
      "properties": {
        "decimals": {
          "type": "integer",
          "format": "uint8",
          "minimum": 0.0
        },
        "name": {
          "type": "string"
        },
        "symbol": {
          "type": "string"
        },
        "total_supply": {
          "$ref": "#/definitions/Uint128"
        }
      },
      "definitions": {
        "Uint128": {
          "description": "A thin wrapper around u128 that is using strings for JSON encoding/decoding, such that the full u128 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances of this and `u128` to get the value out:\n\n``` # use cosmwasm_std::Uint128; let a = Uint128::from(123u128); assert_eq!(a.u128(), 123);\n\nlet b = Uint128::from(42u64); assert_eq!(b.u128(), 42);\n\nlet c = Uint128::from(70u32); assert_eq!(c.u128(), 70); ```",
          "type": "string"
        }
      }
    },
    "wrapped_asset_info": {
      "$schema": "http://json-schema.org/draft-07/schema#",
      "title": "WrappedAssetInfoResponse",
      "type": "object",
      "required": [
        "asset_address",
        "asset_chain",
        "bridge"
      ],
      "properties": {
        "asset_address": {
          "$ref": "#/definitions/Binary"
        },
        "asset_chain": {
          "type": "integer",
          "format": "uint16",
          "minimum": 0.0
        },
        "bridge": {
          "$ref": "#/definitions/Addr"
        }
      },
      "definitions": {
        "Addr": {
          "description": "A human readable address.\n\nIn Cosmos, this is typically bech32 encoded. But for multi-chain smart contracts no assumptions should be made other than being UTF-8 encoded and of reasonable length.\n\nThis type represents a validated address. It can be created in the following ways 1. Use `Addr::unchecked(input)` 2. Use `let checked: Addr = deps.api.addr_validate(input)?` 3. Use `let checked: Addr = deps.api.addr_humanize(canonical_addr)?` 4. Deserialize from JSON. This must only be done from JSON that was validated before such as a contract's state. `Addr` must not be used in messages sent by the user because this would result in unvalidated instances.\n\nThis type is immutable. If you really need to mutate it (Really? Are you sure?), create a mutable copy using `let mut mutable = Addr::to_string()` and operate on that `String` instance.",
          "type": "string"
        },
        "Binary": {
          "description": "Binary is a wrapper around Vec<u8> to add base64 de/serialization with serde. It also adds some helper methods to help encode inline.\n\nThis is only needed as serde-json-{core,wasm} has a horrible encoding for Vec<u8>",
          "type": "string"
        }
      }
    }
  }
}
