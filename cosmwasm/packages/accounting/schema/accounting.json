{
  "contract_name": "accounting",
  "contract_version": "0.1.0",
  "idl_version": "1.0.0",
  "instantiate": {
    "$schema": "http://json-schema.org/draft-07/schema#",
    "title": "InstantiateMsg",
    "type": "object",
    "required": [
      "accounts",
      "modifications",
      "transfers"
    ],
    "properties": {
      "accounts": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Account"
        }
      },
      "modifications": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Modification"
        }
      },
      "transfers": {
        "type": "array",
        "items": {
          "$ref": "#/definitions/Transfer"
        }
      }
    },
    "additionalProperties": false,
    "definitions": {
      "Account": {
        "type": "object",
        "required": [
          "balance",
          "key"
        ],
        "properties": {
          "balance": {
            "$ref": "#/definitions/Balance"
          },
          "key": {
            "$ref": "#/definitions/Key"
          }
        },
        "additionalProperties": false
      },
      "Balance": {
        "$ref": "#/definitions/Uint256"
      },
      "Data": {
        "type": "object",
        "required": [
          "amount",
          "recipient_chain",
          "token_address",
          "token_chain"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint256"
          },
          "recipient_chain": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0
          },
          "token_address": {
            "$ref": "#/definitions/TokenAddress"
          },
          "token_chain": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "Key": {
        "type": "object",
        "required": [
          "chain_id",
          "token_address",
          "token_chain"
        ],
        "properties": {
          "chain_id": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0
          },
          "token_address": {
            "$ref": "#/definitions/TokenAddress"
          },
          "token_chain": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "Kind": {
        "type": "string",
        "enum": [
          "add",
          "sub"
        ]
      },
      "Modification": {
        "type": "object",
        "required": [
          "amount",
          "chain_id",
          "kind",
          "reason",
          "sequence",
          "token_address",
          "token_chain"
        ],
        "properties": {
          "amount": {
            "$ref": "#/definitions/Uint256"
          },
          "chain_id": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0
          },
          "kind": {
            "$ref": "#/definitions/Kind"
          },
          "reason": {
            "type": "string"
          },
          "sequence": {
            "type": "integer",
            "format": "uint64",
            "minimum": 0.0
          },
          "token_address": {
            "$ref": "#/definitions/TokenAddress"
          },
          "token_chain": {
            "type": "integer",
            "format": "uint16",
            "minimum": 0.0
          }
        },
        "additionalProperties": false
      },
      "TokenAddress": {
        "type": "string"
      },
      "Transfer": {
        "type": "object",
        "required": [
          "data",
          "key"
        ],
        "properties": {
          "data": {
            "$ref": "#/definitions/Data"
          },
          "key": {
            "$ref": "#/definitions/Key"
          }
        },
        "additionalProperties": false
      },
      "Uint256": {
        "description": "An implementation of u256 that is using strings for JSON encoding/decoding, such that the full u256 range can be used for clients that convert JSON numbers to floats, like JavaScript and jq.\n\n# Examples\n\nUse `from` to create instances out of primitive uint types or `new` to provide big endian bytes:\n\n``` # use cosmwasm_std::Uint256; let a = Uint256::from(258u128); let b = Uint256::new([ 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 0u8, 1u8, 2u8, ]); assert_eq!(a, b); ```",
        "type": "string"
      }
    }
  },
  "execute": null,
  "query": null,
  "migrate": null,
  "sudo": null,
  "responses": null
}
