/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type Binary = string;
export interface InstantiateMsg {
  chain_id: number;
  gov_address: Binary;
  gov_chain: number;
  native_decimals: number;
  native_denom: string;
  native_symbol: string;
  wormhole_contract: string;
  wrapped_asset_code_id: number;
  [k: string]: unknown;
}
export type ExecuteMsg = {
  register_asset_hook: {
    chain: number;
    token_address: ExternalTokenId;
    [k: string]: unknown;
  };
} | {
  deposit_tokens: {
    [k: string]: unknown;
  };
} | {
  withdraw_tokens: {
    asset: AssetInfo;
    [k: string]: unknown;
  };
} | {
  initiate_transfer: {
    asset: Asset;
    fee: Uint128;
    nonce: number;
    recipient: Binary;
    recipient_chain: number;
    [k: string]: unknown;
  };
} | {
  initiate_transfer_with_payload: {
    asset: Asset;
    fee: Uint128;
    nonce: number;
    payload: Binary;
    recipient: Binary;
    recipient_chain: number;
    [k: string]: unknown;
  };
} | {
  submit_vaa: {
    data: Binary;
    [k: string]: unknown;
  };
} | {
  create_asset_meta: {
    asset_info: AssetInfo;
    nonce: number;
    [k: string]: unknown;
  };
} | {
  complete_transfer_with_payload: {
    data: Binary;
    relayer: string;
    [k: string]: unknown;
  };
};
export type AssetInfo = {
  token: {
    contract_addr: string;
    [k: string]: unknown;
  };
} | {
  native_token: {
    denom: string;
    [k: string]: unknown;
  };
};
export type Uint128 = string;
export interface ExternalTokenId {
  bytes: [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number];
  [k: string]: unknown;
}
export interface Asset {
  amount: Uint128;
  info: AssetInfo;
  [k: string]: unknown;
}
export type QueryMsg = {
  wrapped_registry: {
    address: Binary;
    chain: number;
    [k: string]: unknown;
  };
} | {
  transfer_info: {
    vaa: Binary;
    [k: string]: unknown;
  };
} | {
  external_id: {
    external_id: Binary;
    [k: string]: unknown;
  };
} | {
  is_vaa_redeemed: {
    vaa: Binary;
    [k: string]: unknown;
  };
} | {
  chain_registration: {
    chain: number;
    [k: string]: unknown;
  };
};
export interface ChainRegistrationResponse {
  address: Binary;
  [k: string]: unknown;
}
export type TokenId = {
  Bank: {
    denom: string;
    [k: string]: unknown;
  };
} | {
  Contract: ContractId;
};
export type ContractId = {
  NativeCW20: {
    contract_address: Addr;
    [k: string]: unknown;
  };
} | {
  ForeignToken: {
    chain_id: number;
    foreign_address: [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number];
    [k: string]: unknown;
  };
};
export type Addr = string;
export interface ExternalIdResponse {
  token_id: TokenId;
  [k: string]: unknown;
}
export interface IsVaaRedeemedResponse {
  is_redeemed: boolean;
  [k: string]: unknown;
}
export interface TransferInfoResponse {
  amount: Uint128;
  fee: Uint128;
  payload: number[];
  recipient: [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number];
  recipient_chain: number;
  token_address: [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number];
  token_chain: number;
  [k: string]: unknown;
}
export interface WrappedRegistryResponse {
  address: string;
  [k: string]: unknown;
}