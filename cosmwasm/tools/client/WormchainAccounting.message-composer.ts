/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { Coin } from "@cosmjs/amino";
import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Binary, InstantiateMsg, Signature, ExecuteMsg, QueryMsg, TokenAddress, Uint256, Key, Transfer, Data, Balance, AllAccountsResponse, Account, Kind, AllModificationsResponse, Modification, AllPendingTransfersResponse, PendingTransfer, Observation, AllTransfersResponse, Empty } from "./WormchainAccounting.types";
export interface WormchainAccountingMessage {
  contractAddress: string;
  sender: string;
  submitObservations: ({
    guardianSetIndex,
    observations,
    signature
  }: {
    guardianSetIndex: number;
    observations: Binary;
    signature: Signature;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  modifyBalance: ({
    guardianSetIndex,
    modification,
    signatures
  }: {
    guardianSetIndex: number;
    modification: Binary;
    signatures: Signature[];
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  upgradeContract: ({
    guardianSetIndex,
    signatures,
    upgrade
  }: {
    guardianSetIndex: number;
    signatures: Signature[];
    upgrade: Binary;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  submitVAAs: ({
    vaas
  }: {
    vaas: Binary[];
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class WormchainAccountingMessageComposer implements WormchainAccountingMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.submitObservations = this.submitObservations.bind(this);
    this.modifyBalance = this.modifyBalance.bind(this);
    this.upgradeContract = this.upgradeContract.bind(this);
    this.submitVAAs = this.submitVAAs.bind(this);
  }

  submitObservations = ({
    guardianSetIndex,
    observations,
    signature
  }: {
    guardianSetIndex: number;
    observations: Binary;
    signature: Signature;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          submit_observations: {
            guardian_set_index: guardianSetIndex,
            observations,
            signature
          }
        })),
        funds
      })
    };
  };
  modifyBalance = ({
    guardianSetIndex,
    modification,
    signatures
  }: {
    guardianSetIndex: number;
    modification: Binary;
    signatures: Signature[];
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          modify_balance: {
            guardian_set_index: guardianSetIndex,
            modification,
            signatures
          }
        })),
        funds
      })
    };
  };
  upgradeContract = ({
    guardianSetIndex,
    signatures,
    upgrade
  }: {
    guardianSetIndex: number;
    signatures: Signature[];
    upgrade: Binary;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          upgrade_contract: {
            guardian_set_index: guardianSetIndex,
            signatures,
            upgrade
          }
        })),
        funds
      })
    };
  };
  submitVAAs = ({
    vaas
  }: {
    vaas: Binary[];
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          submit_v_a_as: {
            vaas
          }
        })),
        funds
      })
    };
  };
}