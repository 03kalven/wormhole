/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { Binary, InstantiateMsg, GuardianSetInfo, GuardianAddress, ExecuteMsg, QueryMsg, Uint128, GetStateResponse, Coin, GuardianSetInfoResponse, GetAddressHexResponse, ParsedVAA } from "./Wormhole.types";
export interface WormholeReadOnlyInterface {
  contractAddress: string;
  guardianSetInfo: () => Promise<GuardianSetInfoResponse>;
  verifyVAA: ({
    blockTime,
    vaa
  }: {
    blockTime: number;
    vaa: Binary;
  }) => Promise<ParsedVAA>;
  getState: () => Promise<GetStateResponse>;
  queryAddressHex: ({
    address
  }: {
    address: string;
  }) => Promise<GetAddressHexResponse>;
}
export class WormholeQueryClient implements WormholeReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.guardianSetInfo = this.guardianSetInfo.bind(this);
    this.verifyVAA = this.verifyVAA.bind(this);
    this.getState = this.getState.bind(this);
    this.queryAddressHex = this.queryAddressHex.bind(this);
  }

  guardianSetInfo = async (): Promise<GuardianSetInfoResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      guardian_set_info: {}
    });
  };
  verifyVAA = async ({
    blockTime,
    vaa
  }: {
    blockTime: number;
    vaa: Binary;
  }): Promise<ParsedVAA> => {
    return this.client.queryContractSmart(this.contractAddress, {
      verify_v_a_a: {
        block_time: blockTime,
        vaa
      }
    });
  };
  getState = async (): Promise<GetStateResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_state: {}
    });
  };
  queryAddressHex = async ({
    address
  }: {
    address: string;
  }): Promise<GetAddressHexResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      query_address_hex: {
        address
      }
    });
  };
}
export interface WormholeInterface extends WormholeReadOnlyInterface {
  contractAddress: string;
  sender: string;
  submitVAA: ({
    vaa
  }: {
    vaa: Binary;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
  postMessage: ({
    message,
    nonce
  }: {
    message: Binary;
    nonce: number;
  }, fee?: number | StdFee | "auto", memo?: string, funds?: Coin[]) => Promise<ExecuteResult>;
}
export class WormholeClient extends WormholeQueryClient implements WormholeInterface {
  override client: SigningCosmWasmClient;
  sender: string;
  override contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.submitVAA = this.submitVAA.bind(this);
    this.postMessage = this.postMessage.bind(this);
  }

  submitVAA = async ({
    vaa
  }: {
    vaa: Binary;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      submit_v_a_a: {
        vaa
      }
    }, fee, memo, funds);
  };
  postMessage = async ({
    message,
    nonce
  }: {
    message: Binary;
    nonce: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      post_message: {
        message,
        nonce
      }
    }, fee, memo, funds);
  };
}