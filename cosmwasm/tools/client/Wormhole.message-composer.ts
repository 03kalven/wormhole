/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { MsgExecuteContractEncodeObject } from "cosmwasm";
import { MsgExecuteContract } from "cosmjs-types/cosmwasm/wasm/v1/tx";
import { toUtf8 } from "@cosmjs/encoding";
import { Binary, InstantiateMsg, GuardianSetInfo, GuardianAddress, ExecuteMsg, QueryMsg, Uint128, GetStateResponse, Coin, GuardianSetInfoResponse, GetAddressHexResponse, ParsedVAA } from "./Wormhole.types";
export interface WormholeMessage {
  contractAddress: string;
  sender: string;
  submitVAA: ({
    vaa
  }: {
    vaa: Binary;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
  postMessage: ({
    message,
    nonce
  }: {
    message: Binary;
    nonce: number;
  }, funds?: Coin[]) => MsgExecuteContractEncodeObject;
}
export class WormholeMessageComposer implements WormholeMessage {
  sender: string;
  contractAddress: string;

  constructor(sender: string, contractAddress: string) {
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.submitVAA = this.submitVAA.bind(this);
    this.postMessage = this.postMessage.bind(this);
  }

  submitVAA = ({
    vaa
  }: {
    vaa: Binary;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          submit_v_a_a: {
            vaa
          }
        })),
        funds
      })
    };
  };
  postMessage = ({
    message,
    nonce
  }: {
    message: Binary;
    nonce: number;
  }, funds?: Coin[]): MsgExecuteContractEncodeObject => {
    return {
      typeUrl: "/cosmwasm.wasm.v1.MsgExecuteContract",
      value: MsgExecuteContract.fromPartial({
        sender: this.sender,
        contract: this.contractAddress,
        msg: toUtf8(JSON.stringify({
          post_message: {
            message,
            nonce
          }
        })),
        funds
      })
    };
  };
}