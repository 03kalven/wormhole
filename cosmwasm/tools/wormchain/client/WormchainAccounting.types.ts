/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.24.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

export type Binary = string;
export interface InstantiateMsg {
  guardian_set_index: number;
  instantiate: Binary;
  signatures: Signature[];
}
export interface Signature {
  index: number;
  signature: [number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number, number];
  [k: string]: unknown;
}
export type ExecuteMsg = {
  submit_observations: {
    guardian_set_index: number;
    observations: Binary;
    signature: Signature;
  };
} | {
  modify_balance: {
    guardian_set_index: number;
    modification: Binary;
    signatures: Signature[];
  };
} | {
  upgrade_contract: {
    guardian_set_index: number;
    signatures: Signature[];
    upgrade: Binary;
  };
} | {
  submit_v_a_as: {
    vaas: Binary[];
  };
};
export type QueryMsg = {
  balance: Key;
} | {
  all_accounts: {
    limit?: number | null;
    start_after?: Key | null;
  };
} | {
  transfer: Key;
} | {
  all_transfers: {
    limit?: number | null;
    start_after?: Key | null;
  };
} | {
  pending_transfer: Key;
} | {
  all_pending_transfers: {
    limit?: number | null;
    start_after?: Key | null;
  };
} | {
  modification: {
    sequence: number;
  };
} | {
  all_modifications: {
    limit?: number | null;
    start_after?: number | null;
  };
} | {
  validate_transfer: {
    transfer: Transfer;
  };
};
export type TokenAddress = string;
export type Uint256 = string;
export interface Key {
  emitter_address: TokenAddress;
  emitter_chain: number;
  sequence: number;
}
export interface Transfer {
  data: Data;
  key: Key;
}
export interface Data {
  amount: Uint256;
  recipient_chain: number;
  token_address: TokenAddress;
  token_chain: number;
}
export type Balance = Uint256;
export interface AllAccountsResponse {
  accounts: Account[];
}
export interface Account {
  balance: Balance;
  key: Key;
}
export type Kind = "add" | "sub";
export interface AllModificationsResponse {
  modifications: Modification[];
}
export interface Modification {
  amount: Uint256;
  chain_id: number;
  kind: Kind;
  reason: string;
  sequence: number;
  token_address: TokenAddress;
  token_chain: number;
}
export interface AllPendingTransfersResponse {
  pending: PendingTransfer[];
}
export interface PendingTransfer {
  data: Data[];
  key: Key;
}
export interface Observation {
  key: Key;
  nonce: number;
  payload: Binary;
  tx_hash: Binary;
}
export interface AllTransfersResponse {
  transfers: Transfer[];
}
export interface Empty {
  [k: string]: unknown;
}